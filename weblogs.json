[
["decode"],
["json_load"],

["add_filename", {"column": "filename"}],

#############
# uri parse #
#############

["join", {"columns": ["cs-host", "uri"], "output_column": "uri_"}],
["lowercase_value", {"column": "uri_"}],
["url_parse", {"column": "uri_"}],
["flatten_dict", {"columns": ["uri_"]}],
["omit", {"columns": ["uri_", "uri_.scheme", "uri_.params", "uri_.hostname", "uri_.port", "uri_.fragment"]}],

["convert_to_array", {"column": "uri_.path", "separator": "/"}],
["split_array", {"column": "uri_.path", "output_columns": ["uri_.path.0", "uri.path.1", "uri.path.2", "uri.path.3", "uri.path.4", "uri.path.5", "uri.path.6", "uri.path.7", "uri.path.8"] }],
["omit", {"columns": ["uri_.path", "uri_.path.0"]}],

["code_snippet", {"code":'''
input_column = "uri_.query"
output_column = "uri.query"
keep_parameters = {
    # location indicators
    "concept",
    "entity",
    "gadgettype",
    "gadget",
    "gadgetpath",
    "menu",
    "page",
    "path",
    "report",
    "reportname",
    "resolverkey",
    "rdreport",

    # oids
    "oid",
    "oidtoken",
    "id",
    "asset",
    "assetcontext",
    "topic",
    "stream",
    "conversationoid",
    "imageoid",
    "room",
    "selected",

    # context
    "contextoid",
    "primaryscopecontext",
    "roomcontext",
    
    # report parameters
    "project",
    "program",
    "teamroom",
    "schedule",
    "assettype",
    "aggregationtype",
    "duration",
    "interval",
    "isbycount",
    "period",
    "showweekends",

    # detail widget parameters
    "mode",
    "newtype",

    # misc
    "issueid",
    "assetfacet",
    "feat-nav"
}
output = {}
qs = line.get(input_column)
if qs and len(qs):
    pairs = [s for s in qs.split('&')]
    for name_value in pairs:
        if not name_value:
            continue
        nv = name_value.split('=', 1)
        if len(nv) != 2:
            nv.append('')
        name = urllib.parse.unquote_plus(nv[0])
        if name in keep_parameters:
            value = urllib.parse.unquote_plus(nv[1])
            if name in output:
                output[name].append(value)
            else:
                output[name] = [value]
line[output_column] = output
''', "import_list": ["urllib.parse"]}],
["flatten_dict", {"columns": ["uri.query"]}],
["omit", {"columns": ["uri_.query", "uri.query"]}],

# trim leading slashes
["regex_replace", {"column": "uri.query.gadget", "regex": "^/+", "repl_string": ""}],
["regex_replace", {"column": "uri.query.gadgetpath", "regex": "^/+", "repl_string": ""}],
["regex_replace", {"column": "uri.query.page", "regex": "^/+", "repl_string": ""}],
["regex_replace", {"column": "uri.query.path", "regex": "^/+", "repl_string": ""}],
["regex_replace", {"column": "uri.query.resolverkey", "regex": "^/+", "repl_string": ""}],

# capture instance
["code_snippet", {"code":'''
instance = line.get('uri.path.1', '')
if instance in ('s', 'favicon.ico', 'robots.txt', 'browserconfig.xml'):
    instance = None
elif re.match('apple-touch-icon', instance):
    instance = None
if instance:
    line['v1.instance'] = instance
''', "import_list": ["re"]}],

# capture final segment
["code_snippet", {"code":'''
cols = (
    'uri.path.8',
    'uri.path.7',
    'uri.path.6',
    'uri.path.5',
    'uri.path.4',
    'uri.path.3',
    'uri.path.2'
)
page = next((line[col] for col in cols if line.get(col)), None)
if page:
    line['v1.page'] = page
'''}],

# coalesce  oids
["code_snippet", {"code":'''
cols = (
    'uri.query.oid',
    'uri.query.oidtoken',
    'uri.query.id',
    'uri.query.asset',
    'uri.query.assetcontext',
    'uri.query.topic',
    'uri.query.stream',
    'uri.query.conversationoid',
    'uri.query.imageoid',
    'uri.query.room',
    'uri.query.selected'
)
assettype = None
assetid = None
oid = next((line[col] for col in cols if line.get(col)), None)
if oid:
    m = re.match(r'(\w+):(\d+)', oid)
    if m:
        (assettype, assetid) = m.groups()
elif line.get('uri.query.newtype'):
    assettype = line['uri.query.newtype']
elif line.get('uri.path.2') == 'rest-1.v1':
    assettype = line.get('uri.path.4')
    assetid = line.get('uri.path.5')
elif line.get('uri.path.2') == 'teamroom.mvc':
    assettype = 'teamroom'
    assetid = line.get('uri.path.4')
if assettype:
    line['v1.assettype'] = assettype
if assetid:
    line['v1.assetid'] = assetid
''', "import_list": ["re"]}],

# global asset
["code_snippet", {"code":'''
if line.get('v1.instance') and line.get('v1.assettype') and line.get('v1.assetid'):
    line['v1.asset'] = line['v1.instance'] + '/' + line['v1.assettype'] + ':' + line['v1.assetid']
'''}],
["hash", {"column": "v1.asset"}],

# calculate type.1
["code_snippet", {"code":'''
type1 = None
if line.get('uri.path.1') == 's':
    type1 = 's'
else:
    path2 = line.get('uri.path.2', '')
    if path2 == 'api':
        type1 = line.get('uri.path.3', '') + '/' + line.get('uri.path.4', '')
    elif re.search(r'\.mvc$', path2):
        type1 = path2 + '/' + line.get('uri.path.3', '')
    elif re.search(r'\.(v1|img|aspx)$', path2):
        type1 = path2
if type1:
    line['v1.type.1'] = type1
''', "import_list": ["re"]}],

# calculate type.2
["code_snippet", {"code":'''
cols = (
    'uri.query.menu',
    'uri.query.page',
    'uri.query.gadgettype',
    'uri.query.gadget',
    'uri.query.gadgetpath',
    'uri.query.entity',
    'uri.query.path',
    'uri.query.concept',
    'uri.query.report',
    'uri.query.reportname',
    'uri.query.resolverkey',
    'uri.query.rdreport'
)
type2 = None
if line.get('uri.path.1') == 's':
    type2 = line.get('uri.path.3')
elif line.get('uri.path.2') == 'rest-1.v1':
    type2 = line.get('uri.path.3')
else:
    type2 = next((line[col] for col in cols if line.get(col)), None)
if type2:
    line['v1.type.2'] = type2
'''}],


#################
# referer parse #
#################

["regex_extract", {"column": "referer", "output_columns": ["referer.gadget.name"], "regex": "^.*gadget=([^?&]*)"}],
["regex_replace", {"column": "referer.gadget.name", "regex": "%2f", "repl_string": "-"}],

["regex_extract", {"column": "referer", "output_columns": ["referer.navigationlevel"], "regex": "^.*feat-nav=([^?&]*)"}],

["if_then_otherwise", {
    "condition": ["regex_match", {"column": "referer", "pattern": "^.*\.mvc/.*"}],
    "then": [["regex_extract", {"column": "referer", "output_columns": ["referer.page"], "regex": "^.*?([^/]*\.mvc/[^/?]*).*"}],
        ["regex_replace", {"column": "referer.page", "regex": "/$", "repl_string": ""}]
    ],
    "otherwise": [["regex_extract", {"column": "referer", "output_columns": ["referer.page"], "regex": "^.*menu=([^?&]*)"}]]
}],

["regex_extract", {"column": "referer", "output_columns": ["referer.oid"], "regex": "^.*(?:%3[Aa]|Show/|Test/)(\d{5,10}).*"}],

["regex_extract", {"column": "referer", "output_columns": ["referer.concept"], "regex": "^.*concept=([^?&]*)"}],

["regex_extract", {"column": "referer", "output_columns": ["referer.report"], "regex": "^.*report=([^?&]*)"}],


["url_parse", {"column": "referer", "default_scheme":"https"}],
["flatten_dict", {"columns": ["referer"]}],

["regex_extract", {"column": "referer.path", "output_columns": ["referer.instance", "referer.route"], "regex": "(?:^\/([^/]+)/(.*)|.*)"}],

# dump

["json_dump"]
]